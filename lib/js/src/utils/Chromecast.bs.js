// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Js_mapperRt = require("bs-platform/lib/js/js_mapperRt.js");
var ChromecastPlayerReloaded = require("chromecast-player-reloaded");

var jsMapperConstantArray = /* array */[
  /* tuple */[
    -889544535,
    "position"
  ],
  /* tuple */[
    100394802,
    "status"
  ],
  /* tuple */[
    169348974,
    "playing"
  ],
  /* tuple */[
    240232876,
    "closed"
  ]
];

function eventToJs(param) {
  return Js_mapperRt.binarySearch(4, param, jsMapperConstantArray);
}

function eventFromJs(param) {
  return Js_mapperRt.revSearch(4, jsMapperConstantArray, param);
}

var player = ChromecastPlayerReloaded();

function launchPlayer(param, param$1) {
  return player.launch(param, param$1);
}

function attachPlayer(param) {
  return player.launch(param);
}

function launch(url) {
  return new Promise((function (resolve, _r) {
                ChromecastPlayerReloaded().launch(url, (function (err, result) {
                        var result$1 = err !== undefined ? (
                            result !== undefined ? /* Error */Block.__(1, [Pervasives.failwith("s")]) : /* Error */Block.__(1, [err])
                          ) : (
                            result !== undefined ? /* Ok */Block.__(0, [Caml_option.valFromOption(result)]) : /* Error */Block.__(1, [Pervasives.failwith("s")])
                          );
                        return resolve(result$1);
                      }));
                return /* () */0;
              }));
}

function attach(param) {
  return new Promise((function (resolve, _r) {
                ChromecastPlayerReloaded().launch((function (err, result) {
                        var result$1 = err !== undefined ? (
                            result !== undefined ? /* Error */Block.__(1, [Pervasives.failwith("s")]) : /* Error */Block.__(1, [err])
                          ) : (
                            result !== undefined ? /* Ok */Block.__(0, [Caml_option.valFromOption(result)]) : /* Error */Block.__(1, [Pervasives.failwith("s")])
                          );
                        return resolve(result$1);
                      }));
                return /* () */0;
              }));
}

function play(player) {
  return new Promise((function (resolve, _r) {
                player.play((function (err, result) {
                        var result$1 = err !== undefined ? (
                            result !== undefined ? /* Error */Block.__(1, [Pervasives.failwith("s")]) : /* Error */Block.__(1, [err])
                          ) : (
                            result !== undefined ? /* Ok */Block.__(0, [Caml_option.valFromOption(result)]) : /* Error */Block.__(1, [Pervasives.failwith("s")])
                          );
                        return resolve(result$1);
                      }));
                return /* () */0;
              }));
}

function pause(player) {
  return new Promise((function (resolve, _r) {
                player.pause((function (err, result) {
                        var result$1 = err !== undefined ? (
                            result !== undefined ? /* Error */Block.__(1, [Pervasives.failwith("s")]) : /* Error */Block.__(1, [err])
                          ) : (
                            result !== undefined ? /* Ok */Block.__(0, [Caml_option.valFromOption(result)]) : /* Error */Block.__(1, [Pervasives.failwith("s")])
                          );
                        return resolve(result$1);
                      }));
                return /* () */0;
              }));
}

var Methods = /* module */[
  /* launch */launch,
  /* attach */attach,
  /* play */play,
  /* pause */pause
];

exports.eventToJs = eventToJs;
exports.eventFromJs = eventFromJs;
exports.player = player;
exports.launchPlayer = launchPlayer;
exports.attachPlayer = attachPlayer;
exports.Methods = Methods;
/* player Not a pure module */
