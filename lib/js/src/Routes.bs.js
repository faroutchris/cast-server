// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Express = require("bs-express/lib/js/src/Express.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Decode$CastServer = require("./Decode.bs.js");
var Sender$CastServer = require("./commands/Sender.bs.js");

function successResponse(param) {
  var json = { };
  json["success"] = true;
  var partial_arg = Express.$$Response[/* sendJson */3];
  return (function (param) {
      return partial_arg(json, param);
    });
}

var badRequest = Express.$$Response[/* sendStatus */7](/* BadRequest */19);

var make = Express.Middleware[/* from */5]((function (param, param$1, res) {
        return successResponse(/* () */0)(res);
      }));

var IndexRoute = /* module */[/* make */make];

var make$1 = Express.PromiseMiddleware[/* from */0]((function (_next, req, res) {
        var match = Express.$$Request[/* bodyJSON */3](req);
        if (match !== undefined) {
          var match$1 = Decode$CastServer.Command[/* make */0](Caml_option.valFromOption(match));
          switch (match$1[/* command */0]) {
            case "launch" : 
                Sender$CastServer.launch(match$1[/* payload */1]);
                break;
            case "pause" : 
                break;
            case "play" : 
                break;
            case "mute" : 
            case "setVolume" : 
            case "stop" : 
            case "unmute" : 
                Promise.resolve(/* () */0);
                break;
            default:
              Promise.resolve(/* () */0);
          }
          return Promise.resolve(successResponse(/* () */0)(res));
        } else {
          return Promise.resolve(badRequest(res));
        }
      }));

var CommandRoute = /* module */[/* make */make$1];

exports.successResponse = successResponse;
exports.badRequest = badRequest;
exports.IndexRoute = IndexRoute;
exports.CommandRoute = CommandRoute;
/* badRequest Not a pure module */
