// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Express = require("bs-express/lib/js/src/Express.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Common$CastServer = require("./utils/Common.bs.js");
var Decode$CastServer = require("./Decode.bs.js");
var Chromecast$CastServer = require("./utils/Chromecast.bs.js");

function successResponse(param) {
  var json = { };
  json["success"] = true;
  var partial_arg = Express.$$Response[/* sendJson */3];
  return (function (param) {
      return partial_arg(json, param);
    });
}

var badRequest = Express.$$Response[/* sendStatus */7](/* BadRequest */19);

var make = Express.Middleware[/* from */5]((function (param, param$1, res) {
        return successResponse(/* () */0)(res);
      }));

var IndexRoute = /* module */[/* make */make];

var make$1 = Express.PromiseMiddleware[/* from */0]((function (_next, req, res) {
        var match = Express.$$Request[/* bodyJSON */3](req);
        if (match !== undefined) {
          var match$1 = Decode$CastServer.Command[/* make */0](Caml_option.valFromOption(match));
          switch (match$1[/* command */0]) {
            case "launch" : 
                Chromecast$CastServer.launchPlayer(match$1[/* payload */1], Common$CastServer.cb((function (param) {
                            if (param.tag) {
                              console.log(param[0]);
                              return /* () */0;
                            } else {
                              console.log("--->", param[0]);
                              return /* () */0;
                            }
                          })));
                break;
            case "mute" : 
            case "pause" : 
            case "play" : 
            case "setVolume" : 
            case "stop" : 
            case "unmute" : 
                Js_exn.raiseError("Unknown command");
                break;
            default:
              Js_exn.raiseError("Unknown command");
          }
          return Promise.resolve(successResponse(/* () */0)(res));
        } else {
          return Promise.resolve(badRequest(res));
        }
      }));

var CommandRoute = /* module */[/* make */make$1];

exports.successResponse = successResponse;
exports.badRequest = badRequest;
exports.IndexRoute = IndexRoute;
exports.CommandRoute = CommandRoute;
/* badRequest Not a pure module */
